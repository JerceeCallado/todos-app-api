service: todos-app-lists

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1

  environment:
    tableName: ${file(../database/serverless.yml):custom.tableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::ImportValue': TodosTableArn-${self:custom.stage}

functions:
  create:
    handler: src/create.main
    environment:
      tablename: ${self:provider.environment.tableName}
    events:
      - http:
          path: lists/create
          method: post
          cors: true
          autorizer: aws_iam
  read:
    handler: src/read.main
    environment:
      tablename: ${self:provider.environment.tableName}
    events:
      - http:
          path: lists/{userId}/{listId}
          method: get
          cors: true
          autorizer: aws_iam
  indexListsOfUser:
    handler: src/indexListsOfUser.main
    environment:
      tablename: ${self:provider.environment.tableName}
    events:
      - http:
          path: lists/{userId}
          method: post
          cors: true
          autorizer: aws_iam
  indexUsersOfList:
    handler: src/indexUsersOfList.main
    environment:
      tablename: ${self:provider.environment.tableName}
    events:
      - http:
          path: lists/{listId}
          method: post
          cors: true
          autorizer: aws_iam
  update:
    handler: src/update.main
    environment:
      tablename: ${self:provider.environment.tableName}
    events:
      - http:
          path: lists/{userId}/{listId}
          method: put
          cors: true
          autorizer: aws_iam
  delete:
    handler: src/delete.main
    environment:
      tablename: ${self:provider.environment.tableName}
    events:
      - http:
          path: lists/{userId}/{listId}
          method: delete
          cors: true
          autorizer: aws_iam

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:custom.stage}-ApiGatewayRestApiId

    ApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:custom.stage}-ApiGatewayRestApiRootResourceId
